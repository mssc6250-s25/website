{
  "hash": "619c092e97f0cc7a82b0e9cbf909ca04",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"04-Linear Regression Code Demo\"\nauthor: 'Dr. Cheng-Han Yu'\nformat: \n  html:\n    toc: true\n    code-link: true\n    code-fold: show\n    code-summary: \"Show/Hide\"\n    code-tools: true\neditor: source\n---\n\n## R implementation\n\n::: {.cell}\n\n```{.r .cell-code}\nadvertising_data <- read.csv(\"../data/Advertising.csv\")\nadvertising_data <- advertising_data[, 2:5]\nhead(advertising_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     TV radio newspaper sales\n1 230.1  37.8      69.2  22.1\n2  44.5  39.3      45.1  10.4\n3  17.2  45.9      69.3   9.3\n4 151.5  41.3      58.5  18.5\n5 180.8  10.8      58.4  12.9\n6   8.7  48.9      75.0   7.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlm_out <- lm(advertising_data$sales ~ ., data = advertising_data)\nsummary(lm_out)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = advertising_data$sales ~ ., data = advertising_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-8.8277 -0.8908  0.2418  1.1893  2.8292 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  2.938889   0.311908   9.422   <2e-16 ***\nTV           0.045765   0.001395  32.809   <2e-16 ***\nradio        0.188530   0.008611  21.893   <2e-16 ***\nnewspaper   -0.001037   0.005871  -0.177     0.86    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.686 on 196 degrees of freedom\nMultiple R-squared:  0.8972,\tAdjusted R-squared:  0.8956 \nF-statistic: 570.3 on 3 and 196 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nconfint(lm_out)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  2.5 %     97.5 %\n(Intercept)  2.32376228 3.55401646\nTV           0.04301371 0.04851558\nradio        0.17154745 0.20551259\nnewspaper   -0.01261595 0.01054097\n```\n\n\n:::\n:::\n\n## Python implementation\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nadvertising_data = pd.read_csv(\"../data/Advertising.csv\")\nadvertising_data = advertising_data.iloc[:, 1:5]\nX = advertising_data.drop(columns=[\"sales\"])\ny = advertising_data[\"sales\"]\n```\n:::\n\n### `scikit-learn`\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression().fit(X, y)\nreg.intercept_\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2.9388893694594014\n```\n\n\n:::\n\n```{.python .cell-code}\nreg.coef_\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([ 0.04576465,  0.18853002, -0.00103749])\n```\n\n\n:::\n:::\n\n### `statsmodels`\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom statsmodels.formula.api import ols\nols_out = ols(formula='sales ~ TV + radio + newspaper', data=advertising_data).fit()\nols_out.params\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIntercept    2.938889\nTV           0.045765\nradio        0.188530\nnewspaper   -0.001037\ndtype: float64\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(ols_out.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                  sales   R-squared:                       0.897\nModel:                            OLS   Adj. R-squared:                  0.896\nMethod:                 Least Squares   F-statistic:                     570.3\nDate:                Mon, 13 Jan 2025   Prob (F-statistic):           1.58e-96\nTime:                        11:56:31   Log-Likelihood:                -386.18\nNo. Observations:                 200   AIC:                             780.4\nDf Residuals:                     196   BIC:                             793.6\nDf Model:                           3                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      2.9389      0.312      9.422      0.000       2.324       3.554\nTV             0.0458      0.001     32.809      0.000       0.043       0.049\nradio          0.1885      0.009     21.893      0.000       0.172       0.206\nnewspaper     -0.0010      0.006     -0.177      0.860      -0.013       0.011\n==============================================================================\nOmnibus:                       60.414   Durbin-Watson:                   2.084\nProb(Omnibus):                  0.000   Jarque-Bera (JB):              151.241\nSkew:                          -1.327   Prob(JB):                     1.44e-33\nKurtosis:                       6.332   Cond. No.                         454.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n```\n\n\n:::\n\n```{.python .cell-code}\ncoef_summary = ols_out.summary2().tables[1]  # Get the coefficients table\nprint(coef_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              Coef.  Std.Err.          t         P>|t|    [0.025    0.975]\nIntercept  2.938889  0.311908   9.422288  1.267295e-17  2.323762  3.554016\nTV         0.045765  0.001395  32.808624  1.509960e-81  0.043014  0.048516\nradio      0.188530  0.008611  21.893496  1.505339e-54  0.171547  0.205513\nnewspaper -0.001037  0.005871  -0.176715  8.599151e-01 -0.012616  0.010541\n```\n\n\n:::\n\n```{.python .cell-code}\nconf_intervals = ols_out.conf_int()\nprint(conf_intervals)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  0         1\nIntercept  2.323762  3.554016\nTV         0.043014  0.048516\nradio      0.171547  0.205513\nnewspaper -0.012616  0.010541\n```\n\n\n:::\n:::\n\n<!-- https://stackoverflow.com/questions/22388498/statsmodels-linear-regression-patsy-formula-to-include-all-predictors-in-model -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}