{
  "hash": "e168902dbe9ba6fdfb9c05c2d12f3c67",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"09- Logistic Regression Code Demo\"\nauthor: 'Dr. Cheng-Han Yu'\nformat: \n  html:\n    toc: true\n    code-link: true\n    code-fold: show\n    # code-summary: \"Show/Hide\"\n    code-tools: true\n    number-sections: true\n# filters: \n#   - include-code-files\n---\n\n## R implementation\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ISLR2)\n```\n:::\n\n### Binary (Binomial) Logistic Regression\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"Default\")\nlogit_fit <- glm(default ~ balance, data = Default, family = binomial)\ncoef(summary(logit_fit))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 Estimate   Std. Error   z value      Pr(>|z|)\n(Intercept) -10.651330614 0.3611573721 -29.49221 3.623124e-191\nbalance       0.005498917 0.0002203702  24.95309 1.976602e-137\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npi_hat <- predict(logit_fit, type = \"response\")\neta_hat <- predict(logit_fit, type = \"link\")  ## default gives us b0 + b1*x\npredict(logit_fit, newdata = data.frame(balance = 2000), type = \"response\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        1 \n0.5857694 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npred_prob <- predict(logit_fit, type = \"response\")\ntable(pred_prob > 0.5, Default$default)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       \n          No  Yes\n  FALSE 9625  233\n  TRUE    42  100\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ROCR)\n# create an object of class prediction \npred <- ROCR::prediction(predictions = pred_prob, labels = Default$default)\n\n# calculates the ROC curve\nroc <- ROCR::performance(prediction.obj = pred, measure = \"tpr\", x.measure = \"fpr\")\nplot(roc, colorize = TRUE, lwd = 3)\n```\n\n::: {.cell-output-display}\n![](09-class-glm-code_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nauc <- ROCR::performance(prediction.obj = pred, measure = \"auc\")\nauc@y.values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.9479785\n```\n\n\n:::\n:::\n\n### Multinomial Logistic Regression\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(foreign)\nmultino_data <- foreign::read.dta(\"../data/hsbdemo.dta\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmultino_data$prog2 <- relevel(multino_data$prog, ref = \"academic\")\nlevels(multino_data$prog2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"academic\" \"general\"  \"vocation\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(multino_data$ses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"low\"    \"middle\" \"high\"  \n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nnet)\nmultino_fit <- nnet::multinom(prog2 ~ ses + write, data = multino_data, trace = FALSE)\nsumm <- summary(multino_fit)\nsumm$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         (Intercept)  sesmiddle    seshigh      write\ngeneral     2.852198 -0.5332810 -1.1628226 -0.0579287\nvocation    5.218260  0.2913859 -0.9826649 -0.1136037\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(fitted(multino_fit))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   academic   general  vocation\n1 0.1482764 0.3382454 0.5134781\n2 0.1202017 0.1806283 0.6991700\n3 0.4186747 0.2368082 0.3445171\n4 0.1726885 0.3508384 0.4764731\n5 0.1001231 0.1689374 0.7309395\n6 0.3533566 0.2377976 0.4088458\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndses <- data.frame(ses = c(\"low\", \"middle\", \"high\"), \n                   write = mean(multino_data$write))\npredict(multino_fit, newdata = dses, type = \"probs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   academic   general  vocation\n1 0.4396845 0.3581917 0.2021238\n2 0.4777488 0.2283353 0.2939159\n3 0.7009007 0.1784939 0.1206054\n```\n\n\n:::\n:::\n\nWe can also use `glmnet` package.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fastDummies) # https://jacobkap.github.io/fastDummies/\nlibrary(glmnet)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Matrix\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoaded glmnet 4.1-8\n```\n\n\n:::\n\n```{.r .cell-code}\nprog <- multino_data$prog2\ndummy_dat <- dummy_cols(multino_data, select_columns = c(\"ses\"))\nx <- dummy_dat |> dplyr::select(ses_middle, ses_high, write)\nfit <- glmnet(x = x, y = prog, family = \"multinomial\", lambda = 0)\ncoef(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$academic\n4 x 1 sparse Matrix of class \"dgCMatrix\"\n                    s0\n           -2.69052260\nses_middle  .         \nses_high    0.98278066\nwrite       0.05793834\n\n$general\n4 x 1 sparse Matrix of class \"dgCMatrix\"\n                   s0\n            0.1625919\nses_middle -0.5337675\nses_high   -0.1805596\nwrite       .        \n\n$vocation\n4 x 1 sparse Matrix of class \"dgCMatrix\"\n                    s0\n            2.52793069\nses_middle  0.29119238\nses_high    .         \nwrite      -0.05566551\n```\n\n\n:::\n\n```{.r .cell-code}\nnewx <- x[1:3, ]\nnewx[, 3] <- mean(multino_data$write)\npredict(fit, as.matrix(newx), type=\"response\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , s0\n\n   academic   general  vocation\n1 0.4396037 0.3582719 0.2021245\n2 0.4777583 0.2283218 0.2939199\n3 0.7009084 0.1784762 0.1206154\n```\n\n\n:::\n\n```{.r .cell-code}\n# model_mat <- model.matrix(prog2~ses+write, data=multino_data)\n```\n:::\n\n\n\n\n## Python implementation\n\n\n### Binary (Binomial) Logistic Regression\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Load your dataset\nDefault = pd.read_csv(\"../data/Default.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nDefault['default'] = Default['default'].map({'Yes': 1, 'No': 0})\nfrom statsmodels.formula.api import logit\nlogit_fit = logit(formula='default ~ balance', data=Default).fit()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOptimization terminated successfully.\n         Current function value: 0.079823\n         Iterations 10\n```\n\n\n:::\n\n```{.python .cell-code}\nlogit_fit.summary2().tables[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               Coef.  Std.Err.          z          P>|z|     [0.025    0.975]\nIntercept -10.651331  0.361169 -29.491287  3.723665e-191 -11.359208 -9.943453\nbalance     0.005499  0.000220  24.952404  2.010855e-137   0.005067  0.005931\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npi_hat = logit_fit.predict(Default[['balance']])  # Type = \"response\" in R\neta_hat = logit_fit.predict(Default[['balance']], which=\"linear\")  # Type = \"link\" in R\nnew_data = pd.DataFrame({'balance': [2000]})\nlogit_fit.predict(new_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0    0.585769\ndtype: float64\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.metrics import confusion_matrix\npred_prob = logit_fit.predict(Default[['balance']])  # Type = \"response\" in R\n# Create predictions based on a 0.5 threshold\npred_class = (pred_prob > 0.5).astype(int)  # Convert to binary class (0 or 1)\n## C00: true negatives; C10: false negatives; C01: false postives; C11: true positives\nconfusion_matrix(y_true=Default['default'], y_pred=pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([[9625,   42],\n       [ 233,  100]])\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.metrics import roc_curve, roc_auc_score\n\n# Calculate the ROC curve\nfpr, tpr, thresholds = roc_curve(Default['default'], pred_prob)\n\n# Calculate the AUC (Area Under the Curve)\nauc = roc_auc_score(Default['default'], pred_prob)\nauc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.9479784946837808\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure()\nplt.plot(fpr, tpr, color='blue')\nplt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Diagonal line\nplt.xlabel('False Positive Rate (FPR)')\nplt.ylabel('True Positive Rate (TPR)')\nplt.show()\n```\n\n::: {.cell-output-display}\n![](09-class-glm-code_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n### Multinomial Logistic Regression\n\n::: {.cell}\n\n```{.python .cell-code}\nmultino_data = pd.read_stata(\"../data/hsbdemo.dta\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmultino_data['prog2'] = multino_data['prog'].cat.reorder_categories(\n    ['academic'] + [cat for cat in multino_data['prog'].cat.categories if cat != 'academic'],\n    ordered=True\n)\nmultino_data['prog2'].unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['vocation', 'general', 'academic']\nCategories (3, object): ['academic' < 'general' < 'vocation']\n```\n\n\n:::\n\n```{.python .cell-code}\nmultino_data['ses'].unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['low', 'middle', 'high']\nCategories (3, object): ['low' < 'middle' < 'high']\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmultino_data['prog_int'] = multino_data['prog2'].map({\n    'academic': 0,\n    'general': 1,\n    'vocation': 2\n})\nmultino_data['prog_int'] = multino_data['prog_int'].cat.codes\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom statsmodels.formula.api import mnlogit\nmultino_fit = mnlogit(\"prog_int ~ ses + write\", data=multino_data).fit()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOptimization terminated successfully.\n         Current function value: 0.899909\n         Iterations 6\n```\n\n\n:::\n\n```{.python .cell-code}\nmultino_fit.params\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      0         1\nIntercept      2.852186  5.218200\nses[T.middle] -0.533291  0.291393\nses[T.high]   -1.162832 -0.982670\nwrite         -0.057928 -0.113603\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfitted_df = pd.DataFrame(multino_fit.predict(), \n                         columns=['academic', 'general', 'vocation'])\nfitted_df.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   academic   general  vocation\n0  0.148278  0.338249  0.513473\n1  0.120203  0.180629  0.699168\n2  0.418679  0.236808  0.344513\n3  0.172690  0.350841  0.476468\n4  0.100125  0.168938  0.730937\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndses = pd.DataFrame({\n    'ses': ['low', 'middle', 'high'],\n    'write': [multino_data['write'].mean()] * 3\n})\nmultino_fit.predict(dses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          0         1         2\n0  0.439684  0.358193  0.202123\n1  0.477749  0.228334  0.293917\n2  0.700902  0.178493  0.120605\n```\n\n\n:::\n:::\n\n\n\nWe can also use `sklearn` package.\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\n# Separate features (X) and target (y)\nX = multino_data[['ses', 'write']]  # Independent variables\ny = multino_data['prog_int']          # Dependent variable (categorical target)\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('cat', OneHotEncoder(drop='first'), ['ses']),  # One-hot encode 'ses'\n        ('num', 'passthrough', ['write'])              # Leave 'write' as is\n    ]\n)\n# Create a multinomial logistic regression model\nmodel = Pipeline([\n    ('preprocessor', preprocessor),  # Preprocessing step\n    ('classifier', LogisticRegression(multi_class='multinomial', penalty=None,\n                                      solver='lbfgs', max_iter=500))\n])\n\nmodel.fit(X, y)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;cat&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;),\n                                                  [&#x27;ses&#x27;]),\n                                                 (&#x27;num&#x27;, &#x27;passthrough&#x27;,\n                                                  [&#x27;write&#x27;])])),\n                (&#x27;classifier&#x27;,\n                 LogisticRegression(max_iter=500, multi_class=&#x27;multinomial&#x27;,\n                                    penalty=None))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;cat&#x27;,\n                                                  OneHotEncoder(drop=&#x27;first&#x27;),\n                                                  [&#x27;ses&#x27;]),\n                                                 (&#x27;num&#x27;, &#x27;passthrough&#x27;,\n                                                  [&#x27;write&#x27;])])),\n                (&#x27;classifier&#x27;,\n                 LogisticRegression(max_iter=500, multi_class=&#x27;multinomial&#x27;,\n                                    penalty=None))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocessor: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;cat&#x27;, OneHotEncoder(drop=&#x27;first&#x27;), [&#x27;ses&#x27;]),\n                                (&#x27;num&#x27;, &#x27;passthrough&#x27;, [&#x27;write&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">cat</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;ses&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(drop=&#x27;first&#x27;)</pre></div> </div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;write&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">passthrough</label><div class=\"sk-toggleable__content fitted\"><pre>passthrough</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(max_iter=500, multi_class=&#x27;multinomial&#x27;, penalty=None)</pre></div> </div></div></div></div></div></div>\n```\n\n:::\n\n```{.python .cell-code}\nmodel.named_steps.classifier.coef_\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([[-0.71516627, -0.63453974,  0.05717724],\n       [ 0.4476491 , -0.0049987 , -0.00075151],\n       [ 0.26751717,  0.63953844, -0.05642573]])\n```\n\n\n:::\n\n```{.python .cell-code}\nmodel.named_steps.classifier.intercept_\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([-1.97496981, -0.28559419,  2.260564  ])\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndses = pd.DataFrame({\n    'ses': ['low', 'middle', 'high'],\n    'write': [multino_data['write'].mean()] * 3\n})\n\npd.DataFrame(model.predict_proba(dses),\n             columns=model.named_steps.classifier.classes_)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          0         1         2\n0  0.439686  0.358190  0.202124\n1  0.477748  0.228334  0.293917\n2  0.700903  0.178494  0.120603\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "09-class-glm-code_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}